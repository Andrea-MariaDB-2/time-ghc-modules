#!/usr/bin/env bash
set -eo pipefail

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

if [ -z "$PROCESS_SCRIPT" ]; then
  PROCESS_SCRIPT="$SCRIPT_DIR/scripts/process"
fi

if [ -z "$HTML_FILE" ]; then
  HTML_FILE="${SCRIPT_DIR}/dist/index.html"
fi

cwd=$(pwd)

dir=$(mktemp -d)
>&2 echo "Working dir: $dir"
cd "$dir"

echo | sqlite3 timings.db <<- EOM
CREATE TABLE events (package TEXT, module TEXT, phase TEXT, alloc INTEGER, time REAL);
EOM

touch failures
NUM_PROCESSED=$(find "$cwd" -name "*.dump-timings" -printf '.' -exec $PROCESS_SCRIPT timings.tsv failures {} \; | wc -c)
NUM_FAILURES=$(cat failures | wc -l)
NUM_EVENTS=$(cat timings.tsv | wc -l)

>&2 echo "Processed $NUM_PROCESSED *.dump-timings files containing $NUM_EVENTS events"
if (( "$NUM_FAILURES" > 0 )); then
    >&2 echo "Failed to parse $NUM_FAILURES lines (see $(pwd)/failures)"
fi

commandfile=$(mktemp)
cat <<EOF > $commandfile
.mode tabs events
.import /dev/stdin events
EOF

cat timings.tsv | sqlite3 --init "$commandfile" "timings.db"

echo "{" > data.json
echo "\"phasesByTime\": $(sqlite3 -json timings.db "select phase, sum(time) as time from events group by phase order by sum(time) desc;")," >> data.json
echo "\"phasesByAlloc\": $(sqlite3 -json timings.db "select phase, sum(alloc) as alloc from events group by phase order by sum(alloc) desc;")," >> data.json
echo "\"modulesByTime\": $(sqlite3 -json timings.db "select module, sum(time) as time from events group by module order by sum(time) desc;")," >> data.json
echo "\"modulesByAlloc\": $(sqlite3 -json timings.db "select module, sum(alloc) as alloc from events group by module order by sum(alloc) desc;")," >> data.json
echo "\"modules\": $(sqlite3 -json timings.db "select module from events group by module order by module;")," >> data.json
echo "\"data\": $(sqlite3 -json timings.db "select module, phase, sum(time) as time, sum(alloc) as alloc from events group by module, phase;")," >> data.json
echo "}" >> data.json

python - <<-_EOT_
with open('report.html', 'w') as report:
  with open("${HTML_FILE}", 'r') as template:
    with open('data.json', 'r') as dat:
      report.write(template.read().replace('"INSERT_DATA_HERE"', dat.read()))
_EOT_

>&2 echo "--> Wrote report at file://$(pwd)/report.html"

echo "$(pwd)/report.html"
